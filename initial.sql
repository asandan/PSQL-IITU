CREATE TABLE IF NOT EXISTS Users  (
  id SERIAL PRIMARY KEY,
  firstName VARCHAR(255) NOT NULL,
  lastName VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  profilePictureUrl TEXT,
  bio TEXT,
  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  lastLogin TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Posts (
	id SERIAL PRIMARY KEY,
	userId INTEGER REFERENCES Users(id) ON DELETE CASCADE,
	content VARCHAR(255) NOT NULL CHECK(LENGTH(content) > 0),
	imageUrl VARCHAR(255), 
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Comments (
	id SERIAL PRIMARY KEY,
	postId INTEGER REFERENCES Posts(id) ON DELETE CASCADE,
	userId INTEGER REFERENCES Users(id) ON DELETE CASCADE,
	commentContent TEXT CHECK(LENGTH(commentContent) > 0),
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Likes (
	id SERIAL PRIMARY KEY,
	postId INTEGER REFERENCES Posts(id) ON DELETE CASCADE,
	userId INTEGER REFERENCES Users(id) ON DELETE CASCADE,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP

  UNIQUE(postId, userId)
);

CREATE TABLE IF NOT EXISTS Followers (
	id SERIAL PRIMARY KEY,
	followerId INTEGER REFERENCES Users(id) ON DELETE CASCADE,
	followingId INTEGER REFERENCES Users(id) ON DELETE CASCADE

  UNIQUE(followerId, followingId)
);

CREATE TABLE IF NOT EXISTS Messages (
	id SERIAL PRIMARY KEY,
	senderId INTEGER REFERENCES Users(id) ON DELETE CASCADE,
	recieverId INTEGER REFERENCES Users(id) ON DELETE CASCADE,
	content TEXT NOT NULL CHECK(LENGTH(content) > 0),
	sentAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_userId ON Posts(userId);
CREATE INDEX idx_postId ON Comments(postId);
